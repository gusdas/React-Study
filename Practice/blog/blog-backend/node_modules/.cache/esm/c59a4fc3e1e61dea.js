let Post,mongoose,Joi;_e1e‍.x([["getPostId",()=>getPostId],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_e1e‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_e1e‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_e1e‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



const { ObjectId } = mongoose.Types;

       const getPostId = async (ctx, next) => {
  const { id } = ctx.params;
  if (!ObjectId.isValid(id)) {
    ctx.status = 400;
    return;
  }
  try {
    const post = await Post.findById(id);
    if (!post) {
      ctx.status = 404;
      return;
    }
    ctx.state.post = post;
    return next();
  } catch (e) {
    ctx.throw(500, e);
  }
};

/* 포스트 작성
POST /api/posts
{title, body}
*/
       const write = async (ctx) => {
  const schema = Joi.object().keys({
    title: Joi.string().required(),
    body: Joi.string().required(),
    tags: Joi.array().items(Joi.string()).required(),
  });
  const result = schema.validate(ctx.request.body);
  if (result.err) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }
  const { title, body, tags } = ctx.request.body;

  const post = new Post({
    title,
    body,
    tags,
    user: ctx.state.user,
  });
  try {
    await post.save();
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
/*포스트 목록 조회
GET /api/posts
 */
       const list = async (ctx) => {
  const page = parseInt(ctx.query.page || '1', 10);
  if (page < 1) {
    ctx.status = 400;
    return;
  }
  try {
    const posts = await Post.find()
      .sort({ _id: -1 })
      .limit(10)
      .skip((page - 1) * 10)
      .lean()
      .exec();
    const postCount = await Post.countDocuments().exec();
    ctx.set('Last-Page', Math.ceil(postCount / 10));
    ctx.body = posts.map((post) => ({
      ...post,
      body:
        post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`,
    }));
  } catch (e) {
    ctx.throw(500, e);
  }
};
/*특정 포스트 조회
GET /api/posts/:id
*/
       const read = (ctx) => {
  ctx.body = ctx.state.post;
};

/*특정 포스트 삭제
DELETE /api/posts/:id
*/
       const remove = async (ctx) => {
  const { id } = ctx.params;
  try {
    /*remove() :특정 조건을 만족하는 데이터를 모두지웁니다.
    findByIdAndRemove() : id를 찾아서 지웁니다.
    findOneAndRemove(): 특정 조건을 만족하는 데이터 하나를 찾아서 제거합니다.
    */
    await Post.findByIdAndRemove(id).exec();

    ctx.status = 204;
  } catch (e) {
    ctx.throw(500, e);
  }
};

/* 포스트 수정(특정 필드 변경)
PATCH /api/posts/:id
{title, body}
 */

       const update = async (ctx) => {
  const { id } = ctx.params;
  const schema = Joi.object().keys({
    title: Joi.string(),
    body: Joi.string(),
    tags: Joi.array().items(Joi.string()),
  });
  const result = schema.validate(ctx.request.body);
  if (result.err) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }
  try {
    const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
      new: true,
    }).exec();
    if (!post) {
      ctx.status = 404;
      return;
    }
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
